@model BookReadingEventApplication.Models.Event

@{
   
}

<h2>Create Event</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.bookTitle, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.bookTitle, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.bookTitle, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.location, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.location, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.location, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.eventDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.eventDate, new { htmlAttributes = new { @type = "date", @class = "form-control datepicker" } })
                @Html.ValidationMessageFor(model => model.eventDate, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.eventDuration, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.eventDuration, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.eventDuration, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.startTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList( "StartTime", new List<SelectListItem>
                {
                     new SelectListItem{Text="Select", Value=""},
                    new SelectListItem {Text="00:00", Value="00:00"},
                    new SelectListItem {Text="01:00", Value="01:00"},
                    new SelectListItem {Text="02:00", Value="02:00"},
                    new SelectListItem {Text="03:00", Value="03:00"},
                    new SelectListItem {Text="04:00", Value="04:00"},
                    new SelectListItem {Text="05:00", Value="05:00"},
                    new SelectListItem {Text="06:00", Value="06:00"},
                    new SelectListItem {Text="07:00", Value="07:00"},
                    new SelectListItem {Text="08:00", Value="08:00"},
                    new SelectListItem {Text="09:00", Value="09:00"},
                    new SelectListItem {Text="10:00", Value="10:00"},
                    new SelectListItem {Text="11:00", Value="11:00"},
                    new SelectListItem {Text="12:00", Value="12:00"},
                    new SelectListItem {Text="13:00", Value="13:00"},
                    new SelectListItem {Text="14:00", Value="14:00"},

                    new SelectListItem {Text="15:00", Value="15:00"},
                    new SelectListItem {Text="16:00", Value="16:00"},
                    new SelectListItem {Text="17:00", Value="17:00"},
                    new SelectListItem {Text="18:00", Value="18:00"},
                    new SelectListItem {Text="19:00", Value="19:00"},
                    new SelectListItem {Text="20:00", Value="20:00"},
                    new SelectListItem {Text="21:00", Value="21:00"},
                    new SelectListItem {Text="22:00", Value="22:00"},
                    new SelectListItem {Text="23:00", Value="23:00"},


                })
                @Html.ValidationMessageFor(model => model.startTime, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.eventType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Event Type", new List<SelectListItem>
                 {
                        
                        new SelectListItem {Text="Public", Value="Public"},
                        new SelectListItem {Text="Private", Value="Private"} },
                        new { @onchange = "CallChangefunc(this.value)" }
                        

               )
                @Html.ValidationMessageFor(model => model.eventType, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.eventInvites, htmlAttributes: new {@class = "control-label col-md-2" })
            <div class="col-md-10" >
                @Html.EditorFor(model => model.eventInvites, new { htmlAttributes = new {id ="invites", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.eventInvites, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create Event" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to Home", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>
    function CallChangefunc(value) {
        let inviteEL = document.getElementById("invites");
            if (value === "Private") {
                inviteEL.removeAttribute("disabled");
            }
            else{
                inviteEL.setAttribute("disabled", true);
                inviteEL.value = "";
            }
        }
</script>


